; Author:	K. Newlander
; Picoblaze LAB Starter Design that contains a global register that defaults to 0 on startup
;	Adds '1' for each press of BTNR
;	Subtracts '1' for each press of BTNL

; Extra ASM to fix issue with Vivado (see documentation), Skips Address 03
	JUMP cold_start
	JUMP cold_start
	JUMP cold_start
	JUMP cold_start
; Cold Start
cold_start:

; SLIDERS are assigned to PORT 02
; PUSHBTNs are assigned to PORT 03
; PUSHBTN(0) is used to add 1
; PUSHBTN(1) is used to subtract 1
; PUSHBTN(3) is used to reset design

; NOTE: (s# usage):
; s0,s1,s2 - Used in delay subroutines
; s3	-	Stores global register for value to display
; s5	-	Stores the debounced push btn signal
; s6	-	Debounced register

	reset: 	LOAD s3, 00								;reset ALU setpoint to 0
			OUTPUT s3, 04							;display reset values
			LOAD s5, 00
			LOAD s6, 00

			;; wait for btn 3 to be depressed to exit reset state
			INPUT s5, 03
			TEST s5, 08
			JUMP NZ, reset	;stay in reset until 'depressed'
		
	; Main Processing Loop
	; Runs debouncer on input push btns
	; Checks current state of push btns to perform operation
	mainlp:	INPUT s5, 03	; store push buttons
			CALL del10ms	; delay 10ms
			INPUT s6, 03	; store push buttons again
			AND s5, s6		; AND push buttons to only keep signals high if held for 10ms
			
			; Determine if Btn0 was pressed
			TEST s5, 01
			CALL NZ, opadd	; Start Addition
			
			; Determine if Btn1 was pressed
			TEST s5, 02
			CALL NZ, opsub	; Start Subtraction
			
			; Determine if Btn3 was pressed
			TEST s5, 08
			JUMP NZ, reset	; Start Subtraction
			
			; Update Displays
			OUTPUT s3, 04	; Update Display with ALU REG
			OUTPUT s4, 05

			JUMP mainlp
	
	;	ADD OPERATION
	;	Handles Carry
	opadd:	ADD 	s3, 01 ; ADD 1 to register
	
	addopend:	INPUT s5, 03
				TEST s5, 01			;check btn0 and only exit this function if button isn't pressed
				JUMP NZ, addopend	;stay in this routine until btn is depressed
				RETURN
	
	;	SUBTRACT OPERATION
	;	Basic Subtract
	opsub:	SUB s3, 01		; subtract 1 from S3
	
	subend:	INPUT s5, 03
			TEST s5, 02			;check btn1 and only exit this function if button isn't pressed
			JUMP NZ, subend	;stay in this routine until btn is depressed
			RETURN
	
	

	;;HELPER FUNCTIONS FROM TESTPROG (used for delay in top level, added a 10ms delay)
	delms:	INPUT s0,07
	delmslp:	INPUT s1,07
			COMPARE s0,s1
			JUMP Z, delmslp
			RETURN
			
	del10ms:	LOAD s2, F5	;load 245
	del10mslp:	CALL delms
				ADD s2, 01
				JUMP NZ, del10mslp
				RETURN

	del250ms:	LOAD s2, 05
	del250mslp: CALL delms
			ADD s2, 01
			JUMP NZ, del250mslp
			RETURN
				
						
						                  